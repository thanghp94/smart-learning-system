--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';
ALTER ROLE supabase_admin SET log_statement TO 'none';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';
ALTER ROLE supabase_auth_admin SET log_statement TO 'none';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';
ALTER ROLE supabase_storage_admin SET log_statement TO 'none';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: action_activity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.action_activity (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    activity_text text,
    image_url text,
    lesson_id uuid
);


ALTER TABLE public.action_activity OWNER TO postgres;

--
-- Name: chant; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chant (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    chant_text text,
    image_url text,
    audio_url text,
    lesson_id uuid
);


ALTER TABLE public.chant OWNER TO postgres;

--
-- Name: content_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.content_categories (
    category_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    description text
);


ALTER TABLE public.content_categories OWNER TO postgres;

--
-- Name: content_full; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.content_full (
    content_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    lesson_id uuid,
    slide_order integer,
    module_type text,
    module_id uuid
);


ALTER TABLE public.content_full OWNER TO postgres;

--
-- Name: conversation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.conversation (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    speaker text,
    dialogue_text text,
    image_url text,
    slide_order integer,
    lesson_id uuid
);


ALTER TABLE public.conversation OWNER TO postgres;

--
-- Name: evaluation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.evaluation (
    evaluation_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    student_id uuid,
    lesson_id uuid,
    feedback_text text,
    evaluation_score integer,
    "timestamp" timestamp with time zone DEFAULT now()
);


ALTER TABLE public.evaluation OWNER TO postgres;

--
-- Name: flashcards; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.flashcards (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    front_content text,
    back_content text,
    image_url text,
    audio_url text,
    lesson_id uuid
);


ALTER TABLE public.flashcards OWNER TO postgres;

--
-- Name: leaderboard; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.leaderboard (
    leaderboard_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    student_id uuid,
    points integer,
    rank integer,
    last_updated timestamp with time zone DEFAULT now()
);


ALTER TABLE public.leaderboard OWNER TO postgres;

--
-- Name: lessons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lessons (
    lesson_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    topic text NOT NULL,
    description text,
    subject_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    thumbnail text
);


ALTER TABLE public.lessons OWNER TO postgres;

--
-- Name: poems; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.poems (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    poem_text text,
    image_url text,
    lesson_id uuid
);


ALTER TABLE public.poems OWNER TO postgres;

--
-- Name: questions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.questions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    question_text text,
    question_type text,
    options json,
    correct_answer text,
    feedback_text text,
    lesson_id uuid
);


ALTER TABLE public.questions OWNER TO postgres;

--
-- Name: song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.song (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    lyrics text,
    audio_url text,
    image_url text,
    lesson_id uuid
);


ALTER TABLE public.song OWNER TO postgres;

--
-- Name: sort_match; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sort_match (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    item_a text,
    item_b text,
    image_url text,
    lesson_id uuid
);


ALTER TABLE public.sort_match OWNER TO postgres;

--
-- Name: story; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.story (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    slide_number integer,
    story_text text,
    image_url text,
    lesson_id uuid
);


ALTER TABLE public.story OWNER TO postgres;

--
-- Name: students_attempts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.students_attempts (
    attempt_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    student_id uuid,
    lesson_id uuid,
    score integer,
    "timestamp" timestamp with time zone DEFAULT now()
);


ALTER TABLE public.students_attempts OWNER TO postgres;

--
-- Name: subjects; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subjects (
    subject_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    subject_name text NOT NULL,
    description text
);


ALTER TABLE public.subjects OWNER TO postgres;

--
-- Name: video; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.video (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    video_url text,
    subtitle_text text,
    autogenerated boolean,
    lesson_id uuid
);


ALTER TABLE public.video OWNER TO postgres;

--
-- Name: vocabulary; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.vocabulary (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    word text,
    definition text,
    image_url text,
    audio_url text,
    lesson_id uuid
);


ALTER TABLE public.vocabulary OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: action_activity; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.action_activity (id, activity_text, image_url, lesson_id) FROM stdin;
57bb288f-1a5c-4ac6-a2be-2810c2cf2939	Do this action activity about lviing and non lving things : Stand up and follow these instructions...	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
88681cda-7230-49cc-a230-fa53891ffbaf	About Motion and force in Action!\n\n1. Stand up and form groups of three.\n2. Each group, think of a way to demonstrate About Motion and force through movement or actions.\n3. Take turns showing your About Motion and force actions to the class.\n4. Discuss how each action represents different aspects of About Motion and force.\n5. Write down three things you learned about About Motion and force from this activity.	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
09e89e4a-1c61-452d-b1f9-d5acdcf9b139	Water cycle in Action!\n\n1. Stand up and form groups of three.\n2. Each group, think of a way to demonstrate Water cycle through movement or actions.\n3. Take turns showing your Water cycle actions to the class.\n4. Discuss how each action represents different aspects of Water cycle.\n5. Write down three things you learned about Water cycle from this activity.	https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
d141f935-a3d8-4dde-baee-c3d1a3ea46fd	Living and non living things Exploration Movement Game!\n\n1. Stand up and find a space where you can move around safely.\n2. When the teacher says "Explore Living and non living things!", move around the room as if you're discovering Living and non living things for the first time.\n3. When the teacher says "Show Living and non living things!", freeze and create a shape or pose that represents something about Living and non living things.\n4. When the teacher says "Share Living and non living things!", turn to a partner and take turns showing your favorite movements.\n5. End with a group circle where everyone does one movement together that represents Living and non living things.\n6. Give yourselves a big round of applause for exploring Living and non living things with your bodies!	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
6e190a3f-b1d6-4fb1-9ef5-fedfb230ed88	Living and non living things in Motion!\n\n1. Stand up and form a circle with your classmates.\n2. Let's pretend to be scientists exploring living and non living things! First, put on your imaginary lab coats.\n3. Now, use your magnifying glass to look closely at living and non living things (make big circles with your hands around your eyes).\n4. Show how living and non living things moves or works by using your whole body.\n5. When the teacher says "Freeze!", stop and share one thing you've learned about living and non living things.\n6. Let's count together how many different ways we can show living and non living things with our bodies!	https://images.unsplash.com/photo-1535982330050-f1c2fb79ff78?q=80&w=1374&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
ae83bcd9-3542-4841-8e0d-edce0cb17add	Living and non living things Learning Adventure\n\n1. Find a partner to work with for this activity.\n2. When the teacher says "Explore," move carefully around the room as if you're explorers discovering Living and non living things for the first time.\n3. When the teacher says "Freeze," stop and create a statue with your body that represents something about Living and non living things.\n4. When the teacher says "Connect," link arms with another pair of students and share one fact about Living and non living things.\n5. When the teacher says "Show," each group of four creates a brief movement sequence that tells a story about Living and non living things.\n6. Finally, when the teacher says "Reflect," sit in a circle and take turns sharing something new you learned about Living and non living things today.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: chant; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.chant (id, chant_text, image_url, audio_url, lesson_id) FROM stdin;
8debab65-8b98-4a0f-bf7e-09c37d69206b	This is a chant about lviing and non lving things .\nLine 2 of the chant.\nRepeat after me!	/placeholder.svg	https://example.com/audio.mp3	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
d283fec2-1e67-489d-af86-98e67b7d93db	ABOUT MOTION AND FORCE! ABOUT MOTION AND FORCE!\nLearn it now, learn it how!\nAbout Motion and force is the way to go!\nUnderstanding helps us grow!\n\nABOUT MOTION AND FORCE! ABOUT MOTION AND FORCE!\nPractice makes it stick, and here's how!\nStudy hard and you will see,\nAbout Motion and force is the key!	/placeholder.svg	https://example.com/audio.mp3	aad8744c-fa09-4532-8a05-c6dbf68a936b
c5155c28-d1ba-4e34-b2d8-714cd9752780	WATER CYCLE! WATER CYCLE!\nLearn it now, learn it how!\nWater cycle is the way to go!\nUnderstanding helps us grow!\n\nWATER CYCLE! WATER CYCLE!\nPractice makes it stick, and here's how!\nStudy hard and you will see,\nWater cycle is the key!	https://images.unsplash.com/photo-1606326608606-aa0b62935f2b?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
331b74f6-6bba-46eb-8596-7ce5d8f371fb	LIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nWe're learning every day!\nLIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nKnowledge is here to stay!\n\nLISTEN! LEARN! DO!\nThis is what we do!\nLIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nLearning with me and you!	https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
2175011e-56c6-40fe-b913-dd116ca650de	LIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nWe're learning science today!\nOBSERVE! PREDICT! EXPERIMENT!\nThat's the scientific way!\n\nLIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nSo much we can discover!\nOBSERVE! PREDICT! EXPERIMENT!\nLearning science together!	https://images.unsplash.com/photo-1427504494785-3a9ca7044f45?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
3f15a584-6507-4873-a10d-67b6e36a4481	LIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nLEARNING IS THE WAY!\nLIVING AND NON LIVING THINGS! LIVING AND NON LIVING THINGS!\nGROWING EVERY DAY!\n\nDISCOVER! EXPLORE! CREATE! LEARN!\nFOR LIVING AND NON LIVING THINGS KNOWLEDGE WE YEARN!\nLISTEN! QUESTION! UNDERSTAND! KNOW!\nWITH LIVING AND NON LIVING THINGS LEARNING WE GROW!	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: content_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.content_categories (category_id, name, description) FROM stdin;
\.


--
-- Data for Name: content_full; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.content_full (content_id, lesson_id, slide_order, module_type, module_id) FROM stdin;
6e667125-d289-49b0-8377-cc947c5d632e	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	1	vocabulary	bf0c7f1d-85fc-4eb9-8722-364798074800
933c611c-b092-4064-b641-fb34454aa1c7	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	2	flashcards	735ca3b0-4e19-4aec-bf2c-f897400f65df
40840ba1-e449-469c-be8f-97be2f89fa8b	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	3	sort_match	4b63bddb-c5df-440d-b1f7-4802fc5b7e4c
df5d93a1-9261-4e33-8fa7-074bb97c7a6d	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	4	poem	5ad53341-56cf-4221-a471-be0e438c84b3
66b6db46-9cc9-4502-9030-b3245ea25a18	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	5	conversation	5d82801f-eddf-499c-87a5-67947e1d0a96
914ffc40-d9d4-46b8-b597-d056b32f00be	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	6	story	42d5355b-ac40-4198-881b-a978cd279084
d637768a-2d20-402e-a272-59e1f9adfc3a	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	7	chant	8debab65-8b98-4a0f-bf7e-09c37d69206b
4f974791-e841-4610-8d54-2029314ea3f3	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	8	action_activity	57bb288f-1a5c-4ac6-a2be-2810c2cf2939
c7ae3c82-2fbe-4b71-9d35-3619880356a5	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	9	song	287c18a2-2785-4d74-9b62-c1cc421ea52c
4025304c-1e9d-4593-bef0-87b5a33933d0	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	10	video	2b55fe88-d4f7-4edf-83e9-13572c281daa
41404128-bfcb-49da-a101-1655a5c46828	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	11	questions	ae6bc9f5-8d87-44f1-a1ee-632d26103822
0484d98c-0ff4-4e1e-8725-ad3a3a8ef445	aad8744c-fa09-4532-8a05-c6dbf68a936b	5	conversation	0416ffef-45a2-41dd-9fc5-183737533253
82edc22c-f349-474f-8ff3-6385341c8458	aad8744c-fa09-4532-8a05-c6dbf68a936b	7	chant	d283fec2-1e67-489d-af86-98e67b7d93db
885ea012-ec5b-4932-8c05-9a5c52fb7eaa	aad8744c-fa09-4532-8a05-c6dbf68a936b	11	questions	b34ea291-732f-4e6d-902e-d80a95e3ee26
5a1b3abd-9f9d-4831-8f11-72f8430bdcc5	aad8744c-fa09-4532-8a05-c6dbf68a936b	2	flashcards	886f201b-7f34-402e-8db0-643438b14c45
54521bce-5b9b-4343-bf7d-873d2cc4ae5f	aad8744c-fa09-4532-8a05-c6dbf68a936b	8	action_activity	88681cda-7230-49cc-a230-fa53891ffbaf
8b61cf87-d40a-43b4-bf99-61f9956a9d31	aad8744c-fa09-4532-8a05-c6dbf68a936b	10	video	9379ecc3-69a5-4fa1-9b4c-0d61a2c3513b
d6f45bb1-e1ee-4d03-b0e3-0caafad0b788	aad8744c-fa09-4532-8a05-c6dbf68a936b	3	sort_match	61f4110c-5c9d-4ca0-8dd0-fe1490b19a9b
0e19976f-fcbb-4942-895d-3cd52371ca6e	aad8744c-fa09-4532-8a05-c6dbf68a936b	4	poem	dbbf06ab-d713-49e2-8b3e-e4796d33bac0
c0fd1f54-d308-4e1c-a9e0-f8d9e6880566	aad8744c-fa09-4532-8a05-c6dbf68a936b	1	vocabulary	e151db06-fa52-4486-9fb5-75cf8398f5ee
9acc4f44-2b2b-4452-bc5c-48751e4f689f	aad8744c-fa09-4532-8a05-c6dbf68a936b	6	story	96422fb4-0e4e-440f-b58f-30ec4f29fdc7
53f90b69-f702-41c2-810f-a8f7876cc866	aad8744c-fa09-4532-8a05-c6dbf68a936b	9	song	67c9da0b-ffc8-422f-80dd-6d6228288812
7891e37a-3645-4162-a9a0-9f93bf89d286	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	4	poem	f9014580-9687-43ac-adc6-f844337a7de2
c7040fa9-6a53-4f93-bfb2-c363bc47d444	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	1	vocabulary	b657427f-539f-4c72-a4f0-b8614dfeddfb
0b03994e-39fd-41dc-8897-b29f470c9fe8	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	6	story	30cc2049-b0d7-4d36-9ffc-993c2f04f36b
187ca254-f35d-4763-b3c0-7ab53c7e5ca1	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	10	video	32e0015f-a98a-4e0b-b3fc-fa83daea8549
a6762b52-6141-4d3d-9976-27421367e054	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	2	flashcards	4014265c-79a2-49cc-ad89-8bb1edb84502
0f6f8503-a549-426e-ac17-41960600cf22	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	3	sort_match	86a96900-ebd3-4942-8190-f282b89b910f
0814b5c6-0882-4a89-a080-e5b8bdef380b	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	11	questions	57a37da9-38b1-4534-92a5-58b0b1a0051a
9ba05e81-b941-482b-b83c-13b8f58e6148	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	8	action_activity	09e89e4a-1c61-452d-b1f9-d5acdcf9b139
7a3a3548-031b-4545-ad54-dfb1ee1b811a	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	9	song	11c0fe6b-2581-4c40-a5cb-e8008226f624
0a99b1b5-8b8f-4995-bfb6-e090c59a7fed	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	5	conversation	9abc1cc0-9beb-4172-8d7f-81997d885fa0
f6cf2135-f80d-42e1-bc23-0c575cbb420d	be1ccf35-69c6-4068-ae0e-4d523b0ccc45	7	chant	c5155c28-d1ba-4e34-b2d8-714cd9752780
8b28f8c2-eee6-49ed-9c1c-dfc29d973895	7bfcd6ee-2701-4470-902f-f38dc953f809	7	chant	331b74f6-6bba-46eb-8596-7ce5d8f371fb
5c089e32-7904-481d-b208-f3d3fab8454f	7bfcd6ee-2701-4470-902f-f38dc953f809	6	story	fdefef14-a5a4-4492-b087-a3abfa75c885
2b569583-933f-4dc2-bd78-f5bb9ae6764b	7bfcd6ee-2701-4470-902f-f38dc953f809	11	questions	4e36d72d-a79b-418a-8c55-973c8084671f
06951688-9fe7-4c13-8a4d-3de8e8c3c8cc	7bfcd6ee-2701-4470-902f-f38dc953f809	9	song	6795c825-f232-44e9-a0ad-efdc641765dd
e8d87fd5-302c-46b7-a0bb-81ac0d3da4e5	7bfcd6ee-2701-4470-902f-f38dc953f809	3	sort_match	3b10cbb7-0fdb-4318-9d73-cd6122a6a32e
f821cfb5-734e-4206-9686-c8b21e99bb44	7bfcd6ee-2701-4470-902f-f38dc953f809	1	vocabulary	a6030527-aafe-4ea1-ab81-4dc5b3bc6584
3c33f9ad-bb33-4f40-a218-0120a5643991	7bfcd6ee-2701-4470-902f-f38dc953f809	2	flashcards	3d228e69-cad2-478e-9d69-d9e4b59425be
cacf79c7-912f-4e32-ac6c-ac001e4a03bd	7bfcd6ee-2701-4470-902f-f38dc953f809	10	video	70b251d8-0d5f-4c3f-a0bd-777d6204db13
01956d1e-8a09-407c-a3d2-7a55047d9012	7bfcd6ee-2701-4470-902f-f38dc953f809	8	action_activity	d141f935-a3d8-4dde-baee-c3d1a3ea46fd
c38a9aaf-db31-44eb-b541-31e1cc3f4146	7bfcd6ee-2701-4470-902f-f38dc953f809	4	poem	d6c57602-1253-45e9-b6e7-26325e25a50c
114b17d8-c0d9-41e2-ab84-42e4ec2eb035	7bfcd6ee-2701-4470-902f-f38dc953f809	5	conversation	11ee3d06-b715-4e03-a525-2dfd8f1bbf71
0f29e297-0056-4d20-862f-6d6022df91fc	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	2	flashcards	ff9314f1-1209-4cc2-a9ec-74306e376eab
527c2cc2-a981-4009-8eb6-9dbe10a53c46	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	11	questions	50941026-d76d-4329-a695-8e254f0faafe
2fd5e396-2a6b-40b4-8926-bce582b92fb9	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	9	song	e3358294-2b32-44f5-93f1-b8751ab15de2
51039e3b-77ae-403d-b589-f15fa5f1f0ea	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	1	vocabulary	27fdfba2-a091-41a2-8f6e-d37ab7ff6ab5
eba508c4-ce40-400a-9f41-f58f0d609245	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	8	action_activity	6e190a3f-b1d6-4fb1-9ef5-fedfb230ed88
2680c067-f41a-4071-8ea8-1fba04d80403	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	7	chant	2175011e-56c6-40fe-b913-dd116ca650de
7c31a550-3c6e-4e5e-8a07-9d943155fedc	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	6	story	fa360e50-5827-4eb0-b008-a96439e59048
06b62677-3d3b-42d1-9414-e9d344b7e16b	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	10	video	19431f2d-391c-4a8e-8e05-f408072fd569
78f33077-2831-48b7-95ab-a6e3eb233902	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	4	poem	25f39a68-8b98-407e-828c-5397f709060a
1ba03681-0b0f-4dc2-8b41-e65a0ef5a03c	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	5	conversation	65ed4d0a-b421-42b2-9e52-94cc49b34bf4
dfa97147-824e-46fe-b0d2-1513a20e74de	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	3	sort_match	048842aa-8f9c-48b0-8d81-69ab9dc3d840
f643608f-e7f0-4358-83cd-a6982925c152	359c9a0f-f0ec-4209-ab74-ef9331545c0c	10	video	15806a0d-a52b-4f72-910c-a6aca8bcc0ad
436e84a9-30e9-43a3-b655-883c4e0bae7d	359c9a0f-f0ec-4209-ab74-ef9331545c0c	5	conversation	35cd4f3c-eb43-419b-83b8-69a6226b8883
acf67ef5-f9d5-4ba2-b84c-7f080969a049	359c9a0f-f0ec-4209-ab74-ef9331545c0c	8	action_activity	ae83bcd9-3542-4841-8e0d-edce0cb17add
36c74955-1216-4f03-a0d7-08c79b78effd	359c9a0f-f0ec-4209-ab74-ef9331545c0c	7	chant	3f15a584-6507-4873-a10d-67b6e36a4481
3b634969-e0a8-457d-b819-4d6ef1e3d7f2	359c9a0f-f0ec-4209-ab74-ef9331545c0c	1	vocabulary	253fd19c-9f85-486f-abe0-e795d5cfc89f
838fa93e-3a5c-4aa4-855d-d09d6b198c58	359c9a0f-f0ec-4209-ab74-ef9331545c0c	4	poem	eb3944d4-3c7c-4208-b371-2c65fd1ab0f9
442f74b6-d83d-482a-87c3-b8f901388e90	359c9a0f-f0ec-4209-ab74-ef9331545c0c	6	story	c4f4f7a2-c860-4e80-9aee-45b5d3e2847a
590d602d-5157-44b6-871b-0d102e408992	359c9a0f-f0ec-4209-ab74-ef9331545c0c	9	song	d4ce09db-e1fb-4abb-ae7b-c5148c218d4a
c26d1204-0585-41a7-94f7-58e32d6b3b03	359c9a0f-f0ec-4209-ab74-ef9331545c0c	3	sort_match	ff992365-68ec-4620-bed7-ce14e2952777
6aa979da-4bc3-407a-a610-471b125498af	359c9a0f-f0ec-4209-ab74-ef9331545c0c	2	flashcards	2f639721-7a68-43fd-bb42-76c9e3eb7aa5
c34850d4-f6fa-4d79-a7f9-5d437baa49ce	e49e48ae-b086-43c9-b796-938ff16accb7	1	vocabulary	15c8e6fd-b954-4fea-b107-48400f0b0c3d
b328bea1-8350-4a7c-b372-aa0f9fe6365a	e49e48ae-b086-43c9-b796-938ff16accb7	2	flashcards	73e041f4-9cb5-40fb-8515-b073a74aeeed
6a696913-dfdd-4825-b0c2-fbcde533a453	e49e48ae-b086-43c9-b796-938ff16accb7	3	sort_match	9e4dce5f-f3ad-4447-b69e-1485f54302d7
7a23091b-dce1-47c8-b2c3-a16d6790324f	e49e48ae-b086-43c9-b796-938ff16accb7	4	poem	00fbc076-0c12-467d-972f-25e71149ae6b
f0512eaf-a04c-4e32-a193-fa6382a1fe0a	e49e48ae-b086-43c9-b796-938ff16accb7	5	conversation	e1c8516d-cf2a-4b09-bd0d-cd870c0b5afc
7dcce503-2150-423b-ba4e-d96e21d464c1	e49e48ae-b086-43c9-b796-938ff16accb7	6	story	3fd7a1b2-76c0-46d4-8402-2654317166c0
d9562491-62cb-4879-9fb3-c9a89f70c309	e49e48ae-b086-43c9-b796-938ff16accb7	7	chant	c118b1b9-43d5-474f-9bab-058348969a0d
65bc48f7-f2d6-4f89-99a6-42c0d60bb867	e49e48ae-b086-43c9-b796-938ff16accb7	8	action_activity	cd8a8bc2-2a8d-41e5-a4e6-9ac73978c165
f852712c-55f7-49af-87e9-4b90de31adc1	e49e48ae-b086-43c9-b796-938ff16accb7	9	song	673afa09-bfe2-4a4d-a02c-f22d6496facf
afdfb7ef-9582-4d56-9a6e-8d4ac1858074	e49e48ae-b086-43c9-b796-938ff16accb7	10	video	8b756f46-75f1-42a1-8caf-13ef3c69e0af
829420b7-c270-4a24-8c2c-4056ed949f71	e49e48ae-b086-43c9-b796-938ff16accb7	11	questions	e612b984-4d4e-4dd2-94de-73ac729bc115
c744ba63-5fbe-42fd-bc9d-40ed1ada7a62	9027d4be-dfd9-4d20-b59b-2034e8e84da7	1	vocabulary	75b5dc77-cf5e-4b19-bbc0-1a04b0e51799
1db82cff-a92e-4c76-88cf-83f751706a07	9027d4be-dfd9-4d20-b59b-2034e8e84da7	2	flashcards	f1009b0a-76ee-4a70-8aae-5665b8211781
3f51c684-f21c-42df-8790-29fedef7d101	9027d4be-dfd9-4d20-b59b-2034e8e84da7	3	sort_match	24c42c48-b56a-47ad-b9db-b6fce211ddc0
d625fab8-f0b9-46c2-b155-c3f18af90b45	9027d4be-dfd9-4d20-b59b-2034e8e84da7	4	poem	d866dc86-b3ec-4642-82a4-f742fd21c1c8
9feb5ef7-6815-47ca-a66d-c9ea93b3c257	9027d4be-dfd9-4d20-b59b-2034e8e84da7	5	conversation	29016483-1394-494f-94d9-8703ab25bab5
8eaf42d3-e7fb-4fdd-ad59-5292ad5964b3	9027d4be-dfd9-4d20-b59b-2034e8e84da7	6	story	5eac2906-8cf1-4d0c-842a-b88b846ddc1c
7e0d53bc-076c-4dd6-8e2b-23a7b311ce75	9027d4be-dfd9-4d20-b59b-2034e8e84da7	7	chant	b4ce7638-8ed8-417b-b86d-09ddb0a7703d
42ac8a56-75de-44ec-b605-1e00334ca860	9027d4be-dfd9-4d20-b59b-2034e8e84da7	8	action_activity	95f50ad6-90e0-42c1-ad20-2f2b00ff2e40
9b78ab70-7034-4ac0-861d-fff4f396660f	9027d4be-dfd9-4d20-b59b-2034e8e84da7	9	song	44a804d3-1edb-40d1-988b-c06380144aab
0a901568-0050-4a4d-962d-827d36fec030	9027d4be-dfd9-4d20-b59b-2034e8e84da7	10	video	5e793d75-9c34-4dfc-a509-fa0690711da4
c1ef3ed1-879b-472a-92c9-df672af4229c	9027d4be-dfd9-4d20-b59b-2034e8e84da7	11	questions	f48d5e19-d323-4ee3-8320-eb417adc0779
\.


--
-- Data for Name: conversation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.conversation (id, speaker, dialogue_text, image_url, slide_order, lesson_id) FROM stdin;
5d82801f-eddf-499c-87a5-67947e1d0a96	Character A	This is dialogue line 1 about lviing and non lving things 	/placeholder.svg	1	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
763975bc-5df5-44c5-b174-80339787b5c4	Character B	This is dialogue line 2 about lviing and non lving things 	/placeholder.svg	2	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
de189676-f482-44c7-bbaa-a942a05c9629	Character A	This is dialogue line 3 about lviing and non lving things 	/placeholder.svg	3	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
0416ffef-45a2-41dd-9fc5-183737533253	Teacher	Today we're going to discuss About Motion and force. Who can tell me what they already know about it?	/placeholder.svg	1	aad8744c-fa09-4532-8a05-c6dbf68a936b
498a681a-0d4b-4d7c-a067-cd0cf0d04df0	Student 1	I've heard that About Motion and force is important for understanding about motion.	/placeholder.svg	2	aad8744c-fa09-4532-8a05-c6dbf68a936b
20b5896e-ee86-46fa-8740-42946d8ae00d	Teacher	That's right! About Motion and force is fundamental to our understanding of many concepts.	/placeholder.svg	3	aad8744c-fa09-4532-8a05-c6dbf68a936b
b1166039-15c6-4a24-9e07-56e6e4e8bdde	Student 2	Can you explain how About Motion and force works in real-world applications?	/placeholder.svg	4	aad8744c-fa09-4532-8a05-c6dbf68a936b
77aa019a-6e3c-4869-bd30-ee83fa0238a9	Teacher	Great question! About Motion and force is applied in various ways, from Create a lesson about motion and force for grade 3... to everyday problem-solving.	/placeholder.svg	5	aad8744c-fa09-4532-8a05-c6dbf68a936b
9abc1cc0-9beb-4172-8d7f-81997d885fa0	Teacher	Today we're going to discuss Water cycle. Who can tell me what they already know about it?	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	1	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
3792e886-6ae1-4b1d-8364-476bbf40e902	Student 1	I've heard that Water cycle is important for understanding Water cycle.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	2	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
21627540-984a-4a92-ab29-212e9cf86f50	Teacher	That's right! Water cycle is fundamental to our understanding of many concepts.	https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e?q=80&w=1470&auto=format&fit=crop	3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
7ff6b2fb-1d0b-471e-8176-d776fb06e2d0	Student 2	Can you explain how Water cycle works in real-world applications?	https://images.unsplash.com/photo-1606326608606-aa0b62935f2b?q=80&w=1470&auto=format&fit=crop	4	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
8e7be44f-9ab2-4e00-adf6-311f1caa3e69	Teacher	Great question! Water cycle is applied in various ways, from Water cycle... to everyday problem-solving.	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	5	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
11ee3d06-b715-4e03-a525-2dfd8f1bbf71	Teacher	Today we're learning all about Living and non living things. Who knows something about Living and non living things?	https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?q=80&w=1373&auto=format&fit=crop	1	7bfcd6ee-2701-4470-902f-f38dc953f809
bd5e7fe4-0e24-4cb7-8508-3002003c43c3	Emma	I think Living and non living things is interesting! I want to learn more about it.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	2	7bfcd6ee-2701-4470-902f-f38dc953f809
40f74c5e-c46f-42db-b8fa-5e9c3f14c047	Teacher	That's great enthusiasm, Emma! Living and non living things is fascinating to explore and learn about.	https://images.unsplash.com/photo-1629909613654-28e377c37b09?q=80&w=1468&auto=format&fit=crop	3	7bfcd6ee-2701-4470-902f-f38dc953f809
347d8956-3c79-4618-88c8-2843c4348e8e	Noah	How do we use Living and non living things in real life?	https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?q=80&w=1373&auto=format&fit=crop	4	7bfcd6ee-2701-4470-902f-f38dc953f809
8b49c296-c8b0-42d3-b307-ff6dc062e274	Teacher	Excellent question, Noah! We'll discover many ways that Living and non living things is part of our everyday lives.	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	5	7bfcd6ee-2701-4470-902f-f38dc953f809
65ed4d0a-b421-42b2-9e52-94cc49b34bf4	Teacher	Today we're going to learn about living and non living things. Does anyone know anything about living and non living things already?	https://images.unsplash.com/photo-1599687351724-dfa3c4ff81b1?q=80&w=1470&auto=format&fit=crop	1	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
6124eeea-f532-46cd-8df3-74b9ebba979d	Sam	I've seen living and non living things in my science book! It has pictures.	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	2	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
b3cfd295-64ff-4ee5-883b-9105a35b7b78	Teacher	That's right, Sam! Living and non living things is part of science and we can observe it around us.	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
34522da1-82e8-4fcf-bae2-3f9f4c6ce730	Teacher	Can we do an experiment about living and non living things?	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	4	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
ca705bde-b071-47f1-b4eb-d7d2a570ffab	Teacher	Great idea, Teacher! Today we'll observe and experiment with living and non living things to learn more about how it works in our world.	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	5	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
35cd4f3c-eb43-419b-83b8-69a6226b8883	Teacher	We're learning about Living and non living things today. What do you already know about this topic?	https://source.unsplash.com/random/?education,learning	1	359c9a0f-f0ec-4209-ab74-ef9331545c0c
d08cd2dd-b046-46d0-b535-758435da3d9a	Jamie	I know that Living and non living things is something we can observe in our community. I've noticed it when I'm learning new things.	https://source.unsplash.com/random/?education,learning	2	359c9a0f-f0ec-4209-ab74-ef9331545c0c
43efeee8-c08e-43ce-b368-0a1ccc340a9d	Teacher	Great connection, Jamie! Living and non living things is definitely part of our daily experiences. Today we'll explore it more deeply through various activities.	https://source.unsplash.com/random/?education,learning	3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
68f0ea8b-068d-4e83-beca-dded64d1fded	Lily	Will we get to work in groups to learn about Living and non living things? I like sharing ideas with my classmates.	https://source.unsplash.com/random/?education,learning	4	359c9a0f-f0ec-4209-ab74-ef9331545c0c
e8f52865-f52e-4ede-8280-fb65e5241b11	Teacher	Yes, Lily! Collaborative learning is a wonderful way to explore Living and non living things. We'll work together to discover different perspectives and build our understanding.	https://source.unsplash.com/random/?education,learning	5	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: evaluation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.evaluation (evaluation_id, student_id, lesson_id, feedback_text, evaluation_score, "timestamp") FROM stdin;
\.


--
-- Data for Name: flashcards; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.flashcards (id, front_content, back_content, image_url, audio_url, lesson_id) FROM stdin;
735ca3b0-4e19-4aec-bf2c-f897400f65df	Question 1 about lviing and non lving things 	Answer 1 about lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
b81a560d-2ffe-4c06-9afe-af2387dd93cd	Question 2 about lviing and non lving things 	Answer 2 about lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
17fe9bfd-64fe-4825-9de5-b5942b40fc22	Question 3 about lviing and non lving things 	Answer 3 about lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
37f38fb7-9a59-43a7-b4a1-b577aba4b11c	Question 4 about lviing and non lving things 	Answer 4 about lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
886f201b-7f34-402e-8db0-643438b14c45	What is the primary purpose of About Motion and force?	The primary purpose is to facilitate understanding and application of key concepts.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
c934730f-e3b9-4ca4-9e54-4912dfbd2ea8	Name two key components of About Motion and force.	1. About structure\n2. About Motion and force methodology	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
abc48c5a-2b97-4f2c-817b-e33f03608f87	How is About Motion and force applied in practical situations?	About Motion and force is applied through careful analysis and implementation of its principles in real-world scenarios.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
fde8689b-149f-46b1-adfa-056dffc0dc4b	What are the benefits of studying About Motion and force?	Studying About Motion and force leads to improved understanding, better problem-solving skills, and practical applications in various fields.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
4014265c-79a2-49cc-ad89-8bb1edb84502	What is the primary purpose of Water cycle?	The primary purpose is to facilitate understanding and application of key concepts.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
5f4932e3-a042-49fc-99ee-262b802ecf45	Name two key components of Water cycle.	1. Water structure\n2. Water cycle methodology	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
323738e7-611a-414c-84d2-5e3b0b6c3263	How is Water cycle applied in practical situations?	Water cycle is applied through careful analysis and implementation of its principles in real-world scenarios.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
60f50046-bd8a-47bf-bfc0-659ac40d890f	What are the benefits of studying Water cycle?	Studying Water cycle leads to improved understanding, better problem-solving skills, and practical applications in various fields.	https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
3d228e69-cad2-478e-9d69-d9e4b59425be	What is Living and non living things?	Living and non living things is an important concept that helps us understand our world better.	https://images.unsplash.com/photo-1516979187457-637abb4f9353?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-15s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
826f9180-09f5-4098-bd99-9341bb092550	Why is Living and non living things important?	Living and non living things is important because it helps us learn and understand new things about our world.	https://images.unsplash.com/photo-1546410531-bb4caa6b424d?q=80&w=1471&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
248fba9d-b24a-4964-ba57-b41555e4d114	Name one example of Living and non living things.	One example of Living and non living things is something we can observe in our everyday lives that demonstrates this concept.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
4f8bdc1e-b729-4852-a619-143a6be56e3e	How do we learn about Living and non living things?	We learn about Living and non living things by exploring, asking questions, and doing activities that help us understand it better.	https://images.unsplash.com/photo-1535982330050-f1c2fb79ff78?q=80&w=1374&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
ff9314f1-1209-4cc2-a9ec-74306e376eab	Living and non living things	The main concept we're learning about. living and non living things refers to an important subject that helps us understand our world better.	https://images.unsplash.com/photo-1497633762265-9d179a990aa6?q=80&w=1473&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
e2cb749b-1529-461b-a52e-de70e15a4438	Living and non living things Features	The important parts or characteristics of living and non living things that make it special and help us recognize it.	https://images.unsplash.com/photo-1509062522246-3755977927d7?q=80&w=1332&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
8065a296-2f2a-4d3e-bdd0-540f1070843f	Living and non living things Examples	Real things we can see or experience that show us what living and non living things is like in our daily lives.	https://images.unsplash.com/photo-1516979187457-637abb4f9353?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
c99fd503-54c2-4a47-b2f8-5b5d401190a1	Learning About Living and non living things	The process of discovering new information and understanding living and non living things through activities and exploration.	https://images.unsplash.com/photo-1535982330050-f1c2fb79ff78?q=80&w=1374&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
d76ddea4-5684-4350-bedf-f82dc114be52	Living and non living things in Our World	How we see and use living and non living things in everyday situations and why it's important to know about it.	https://images.unsplash.com/photo-1503676382389-4809596d5290?q=80&w=1374&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-15s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
7a447c2a-5b0f-47db-8e17-5a01037b08ec	Observe	To watch carefully and notice details about something in science.	https://images.unsplash.com/photo-1599687351724-dfa3c4ff81b1?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
f399f669-3427-477d-8061-749e581ff220	Experiment	A test we do to find out what happens and learn new information.	https://images.unsplash.com/photo-1516979187457-637abb4f9353?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
3541a5ea-6e4d-4b8f-9f77-edff2fbd2e88	What do scientists do?	Scientists observe, ask questions, make predictions, and conduct experiments to learn about the world.	https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?q=80&w=1373&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
2f639721-7a68-43fd-bb42-76c9e3eb7aa5	Living and non living things	The main concept we're learning about. A key concept that helps us understand Living, living, things.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
a11357de-c9ab-46f8-b5ec-f648df912337	Living and non living things Features	The important characteristics that make Living and non living things unique.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-15s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
0aac4bb6-0356-4ab6-a5aa-0fa0b20a42b4	Living and non living things Examples	Real-world instances that show what Living and non living things looks like in practice.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
b0ed101e-6265-4863-affe-2cbcbe0ee79d	Living and non living things Importance	Why learning about Living and non living things matters in our lives and the world.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
6ace1ec3-25bd-4949-b37a-7e8ff7b5ec12	Living and non living things Applications	Ways we can use our knowledge of Living and non living things in different situations.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: leaderboard; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.leaderboard (leaderboard_id, student_id, points, rank, last_updated) FROM stdin;
\.


--
-- Data for Name: lessons; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lessons (lesson_id, topic, description, subject_id, created_at, thumbnail) FROM stdin;
5af547a4-5f6b-4d4d-a79d-9a9b44d524c0	lviing and non lving things 	Auto-generated lesson about lviing and non lving things 	7f853f8b-15c7-4a07-b5cf-e1ae62df9cd2	2025-03-11 06:53:58.271138+00	/placeholder.svg
aad8744c-fa09-4532-8a05-c6dbf68a936b	About Motion and force	Generated lesson about About Motion and force with AI-assisted content based on: Create a lesson about motion and force for grade 3 	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 07:04:06.566038+00	/placeholder.svg
be1ccf35-69c6-4068-ae0e-4d523b0ccc45	Water cycle	Generated lesson about Water cycle with AI-assisted content based on: Water cycle	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 07:07:11.859727+00	https://images.unsplash.com/photo-1606326608606-aa0b62935f2b?q=80&w=1470&auto=format&fit=crop
7bfcd6ee-2701-4470-902f-f38dc953f809	Living and non living things	Interactive lesson about Living and non living things. This lesson includes vocabulary, activities, and multimedia content to help students understand key concepts about Living and non living things.	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 07:57:32.187389+00	https://images.unsplash.com/photo-1509062522246-3755977927d7?q=80&w=1332&auto=format&fit=crop
ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3	living and non living things	Interactive lesson about living and non living things. This lesson includes vocabulary, activities, and multimedia content to help students understand key concepts about living and non living things.	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 08:03:58.995903+00	https://images.unsplash.com/photo-1509062522246-3755977927d7?q=80&w=1332&auto=format&fit=crop
359c9a0f-f0ec-4209-ab74-ef9331545c0c	Living and non living things	Interactive lesson about Living and non living things. This lesson includes vocabulary, activities, and multimedia content to help students understand key concepts about Living and non living things.	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 08:13:57.449672+00	https://source.unsplash.com/random/?education,learning
e49e48ae-b086-43c9-b796-938ff16accb7	Living and non living things	Interactive lesson about Living and non living things. This lesson includes vocabulary, activities, and multimedia content to help students understand key concepts about Living and non living things.	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 08:16:03.22985+00	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop
9027d4be-dfd9-4d20-b59b-2034e8e84da7	addition to 10 	Interactive lesson about addition to 10 . This lesson includes vocabulary, activities, and multimedia content to help students understand key concepts about addition to 10 .	e19c37f8-3337-4ade-a830-b47d623d99b8	2025-03-11 08:20:29.40214+00	https://source.unsplash.com/random/800x600/?addition%20to%2010%20%20thumbnail&sig=1
\.


--
-- Data for Name: poems; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.poems (id, poem_text, image_url, lesson_id) FROM stdin;
5ad53341-56cf-4221-a471-be0e438c84b3	This is a generated poem about lviing and non lving things .\nLine 2 of the poem.\nLine 3 of the poem.\n\nFollowing the user instructions: Create a slide about living an...	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
dbbf06ab-d713-49e2-8b3e-e4796d33bac0	The Essence of About Motion and force\n\nIn the realm of About Motion and force we find,\nConcepts and ideas of every kind.\nLearning and growing day by day,\nUnderstanding About Motion and force in every way.\n\nAbout Motion and force enlightens the mind,\nNew perspectives, forever we find.\nThis journey of knowledge never ends,\nAs About Motion and force around every corner bends.	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
f9014580-9687-43ac-adc6-f844337a7de2	The Essence of Water cycle\n\nIn the realm of Water cycle we find,\nConcepts and ideas of every kind.\nLearning and growing day by day,\nUnderstanding Water cycle in every way.\n\nWater cycle enlightens the mind,\nNew perspectives, forever we find.\nThis journey of knowledge never ends,\nAs Water cycle around every corner bends.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
d6c57602-1253-45e9-b6e7-26325e25a50c	The Wonder of Living and non living things\n\nLiving and non living things, Living and non living things, oh so grand,\nHelping us learn and understand.\nLiving and non living things is special, Living and non living things is fun,\nWe're learning together, everyone!\n\nSo much to discover, so much to see,\nLiving and non living things is amazing, don't you agree?\nLearning and growing day by day,\nWith Living and non living things to help us along the way!	https://images.unsplash.com/photo-1535982330050-f1c2fb79ff78?q=80&w=1374&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
25f39a68-8b98-407e-828c-5397f709060a	Our World of Living and non living things\n\nWe look around with wondering eyes,\nAt living and non living things under bright blue skies.\nWe learn and grow each special day,\nDiscovering things in our own way.\n\nQuestions we ask, answers we find,\nLiving and non living things is amazing for young minds!\nSo much to see, so much to do,\nLearning about living and non living things with friends like you!	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
eb3944d4-3c7c-4208-b371-2c65fd1ab0f9	The Wonder of Living and non living things\n\nLearning and growing day by day,\nLiving and non living things guides us along the way.\nQuestions and answers, seeking true,\nDiscoveries waiting, fresh and new.\n\nKnowledge expands with every page,\nLiving and non living things important at any age.\nTogether exploring what we find,\nLiving and non living things enriches heart and mind!	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: questions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.questions (id, question_text, question_type, options, correct_answer, feedback_text, lesson_id) FROM stdin;
ae6bc9f5-8d87-44f1-a1ee-632d26103822	Question 1 about lviing and non lving things ?	multiple_choice	"[\\"Option A\\",\\"Option B\\",\\"Option C\\",\\"Option D\\"]"	Option B	Feedback for question 1	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
60fc3054-2a7f-4e05-b9ec-097826652d61	Question 2 about lviing and non lving things ?	true_false	"[\\"True\\",\\"False\\"]"	True	Feedback for question 2	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
d297d13e-61fd-4a66-8b5a-e0fc603d8234	Question 3 about lviing and non lving things ?	short_answer	"[]"	Any relevant answer	Feedback for question 3	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
b34ea291-732f-4e6d-902e-d80a95e3ee26	What is the main purpose of studying About Motion and force?	multiple_choice	"[\\"To memorize definitions\\",\\"To understand core concepts and their applications\\",\\"To pass tests only\\",\\"To fill time in class\\"]"	To understand core concepts and their applications	That's right! The main purpose of studying About Motion and force is to understand the core concepts and how they can be applied in various contexts.	\N
c7b69ceb-fff8-459d-a1ee-8a091c0511d3	About Motion and force is important for developing critical thinking skills.	true_false	"[\\"True\\",\\"False\\"]"	True	Correct! About Motion and force helps develop critical thinking by challenging us to analyze and apply concepts.	\N
38455c8e-4b6b-45f8-bea6-d73e8ec0debe	Explain how About Motion and force connects to real-world applications.	short_answer	"[]"	Any reasonable explanation that shows understanding	Great thinking! About Motion and force connects to the real world in many ways, including through Create a lesson about motion and force for grade 3...	\N
57a37da9-38b1-4534-92a5-58b0b1a0051a	What is the main purpose of studying Water cycle?	multiple_choice	"[{\\"text\\":\\"To memorize definitions\\"},{\\"text\\":\\"To understand core concepts and their applications\\"},{\\"text\\":\\"To pass tests only\\"},{\\"text\\":\\"To fill time in class\\"}]"	To understand core concepts and their applications	That's right! The main purpose of studying Water cycle is to understand the core concepts and how they can be applied in various contexts.	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
c8bab0e9-a69a-43e9-ab2b-43255ce4274f	Water cycle is important for developing critical thinking skills.	true_false	"[{\\"text\\":\\"True\\"},{\\"text\\":\\"False\\"}]"	True	Correct! Water cycle helps develop critical thinking by challenging us to analyze and apply concepts.	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
430055d8-7591-4762-baa9-e6832bcbe789	Explain how Water cycle connects to real-world applications.	short_answer	"[]"	Any reasonable explanation that shows understanding	Great thinking! Water cycle connects to the real world in many ways, including through Water cycle...	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
4e36d72d-a79b-418a-8c55-973c8084671f	What is one important thing we learned about Living and non living things?	multiple_choice	"[{\\"text\\":\\"Living and non living things is not important to learn about\\"},{\\"text\\":\\"Living and non living things helps us understand our world better\\"},{\\"text\\":\\"Living and non living things only exists in books\\"},{\\"text\\":\\"Living and non living things is too difficult to understand\\"}]"	Living and non living things helps us understand our world better	That's right! Learning about Living and non living things helps us better understand the world around us.	7bfcd6ee-2701-4470-902f-f38dc953f809
dbbbae6a-16f2-48cb-978f-6ca1a42a6d1f	Learning about Living and non living things can be fun and interesting.	true_false	"[{\\"text\\":\\"True\\"},{\\"text\\":\\"False\\"}]"	True	Correct! Learning about Living and non living things is both fun and interesting when we explore it together.	7bfcd6ee-2701-4470-902f-f38dc953f809
33093f3e-cbee-4b2e-b59b-0b86cfcc95e7	Draw or write about your favorite thing you learned about Living and non living things.	short_answer	"[]"	Any reasonable answer that shows engagement	What a thoughtful response! It's wonderful to see what you found most interesting about Living and non living things.	7bfcd6ee-2701-4470-902f-f38dc953f809
50941026-d76d-4329-a695-8e254f0faafe	What is Living and non living things?	multiple_choice	"[{\\"text\\":\\"The main concept we're learning about. living and non living\\"},{\\"text\\":\\"Something not related to living and non living things\\"},{\\"text\\":\\"A type of food\\"},{\\"text\\":\\"A place to visit\\"}]"	The main concept we're learning about. living and non living	That's right! Living and non living things The main concept we're learning about. living and non living things refers to an important subject t	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
1a65306f-ce3e-4c29-b8dd-65ca76f28d95	What is Living and non living things Features?	multiple_choice	"[{\\"text\\":\\"The important parts or characteristics of living and non liv\\"},{\\"text\\":\\"Something not related to living and non living things\\"},{\\"text\\":\\"A type of food\\"},{\\"text\\":\\"A place to visit\\"}]"	The important parts or characteristics of living and non liv	That's right! Living and non living things Features The important parts or characteristics of living and non living things that make it special and help	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
c0bcf0b7-6e2b-4274-8290-1a4e6391b951	We can find examples of living and non living things in our everyday world.	true_false	"[{\\"text\\":\\"True\\"},{\\"text\\":\\"False\\"}]"	True	Correct! Living and non living things is all around us in our everyday lives.	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
d45f6573-70f5-47ba-93db-d97ea7322cf9	Draw or write about something you learned about living and non living things.	short_answer	"[]"	Any reasonable answer that shows understanding	Great thinking! It's wonderful to see how you're learning about living and non living things and expressing your ideas.	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
\.


--
-- Data for Name: song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.song (id, lyrics, audio_url, image_url, lesson_id) FROM stdin;
287c18a2-2785-4d74-9b62-c1cc421ea52c	This is a song about lviing and non lving things .\nVerse 1 of the song.\nChorus of the song.	https://example.com/song.mp3	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
67c9da0b-ffc8-422f-80dd-6d6228288812	The About Motion and force Song\n\nVerse 1:\nLearning all about About Motion and force today,\nUnderstanding in a whole new way.\nKnowledge building step by step,\nAbout Motion and force concepts we won't forget.\n\nChorus:\nOh, About Motion and force! It's amazing to see,\nHow it works so wonderfully.\nAbout Motion and force! Now we understand,\nThe concept is at our command.\n\nVerse 2:\nEvery day we learn some more,\nAbout Motion and force knowledge we explore.\nPutting pieces into place,\nLearning with a smile on our face.	https://example.com/song.mp3	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
11c0fe6b-2581-4c40-a5cb-e8008226f624	The Water cycle Song\n\nVerse 1:\nLearning all about Water cycle today,\nUnderstanding in a whole new way.\nKnowledge building step by step,\nWater cycle concepts we won't forget.\n\nChorus:\nOh, Water cycle! It's amazing to see,\nHow it works so wonderfully.\nWater cycle! Now we understand,\nThe concept is at our command.\n\nVerse 2:\nEvery day we learn some more,\nWater cycle knowledge we explore.\nPutting pieces into place,\nLearning with a smile on our face.	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	https://images.unsplash.com/photo-1549633030-89d0743bad01?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
6795c825-f232-44e9-a0ad-efdc641765dd	The Living and non living things Song\n\nVerse 1:\nWe're learning about Living and non living things today,\nIn so many fun and different ways.\nTogether we'll discover what's new,\nLiving and non living things learning, just for me and you!\n\nChorus:\nLiving and non living things, Living and non living things, we love to learn,\nLiving and non living things, Living and non living things, it's our turn!\nKnowledge and fun go hand in hand,\nLiving and non living things is the best in the land!\n\nVerse 2:\nQuestions and answers help us grow,\nAbout Living and non living things, there's so much to know.\nLearning together every day,\nLiving and non living things knowledge is here to stay!	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
e3358294-2b32-44f5-93f1-b8751ab15de2	The Living and non living things Song\n\nVerse 1:\nWe're learning about living and non living things today,\nIn science class, hip hooray!\nObserve and wonder, question why,\nLiving and non living things is awesome, let's give it a try!\n\nChorus:\nLiving and non living things, Living and non living things, we want to know,\nLiving and non living things, Living and non living things, watch us grow!\nLearning together is so much fun,\nLiving and non living things, Living and non living things, everyone!\n\nVerse 2:\nScientists explore and learn each day,\nAbout living and non living things in every way.\nExperiments help us understand,\nLiving and non living things in our world is really grand!	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
d4ce09db-e1fb-4abb-ae7b-c5148c218d4a	The Living and non living things Learning Song\n\nVerse 1:\nEvery day we learn and grow,\nAbout Living and non living things, there's so much to know.\nWorking together, just me and you,\nDiscovering things both old and new.\n\nChorus:\nLiving and non living things, Living and non living things, we're learning today!\nLiving and non living things, Living and non living things, hip hip hooray!\nKnowledge is power, wisdom is cool,\nLearning's the best thing about school!\n\nVerse 2:\nQuestions we ask, answers we find,\nLiving and non living things expands our growing minds.\nSharing ideas, speaking out loud,\nLearning together makes us proud!	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: sort_match; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sort_match (id, item_a, item_b, image_url, lesson_id) FROM stdin;
4b63bddb-c5df-440d-b1f7-4802fc5b7e4c	Item A 1 for lviing and non lving things 	Item B 1 for lviing and non lving things 	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
acf02b02-60bc-4e80-b0de-ed801c61647e	Item A 2 for lviing and non lving things 	Item B 2 for lviing and non lving things 	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
fc983c0d-7280-423e-b504-d0ebd60a29b9	Item A 3 for lviing and non lving things 	Item B 3 for lviing and non lving things 	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
61f4110c-5c9d-4ca0-8dd0-fe1490b19a9b	About Motion and force Concept	The foundational idea behind About Motion and force	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
97147e9a-3ffe-4d3a-928a-23a8a79972d9	About Motion and force Application	How About Motion and force is used in practical situations	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
8212c913-add0-4706-97db-c25241cef863	About Motion and force Development	The process of improving and expanding About Motion and force	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
86a96900-ebd3-4942-8190-f282b89b910f	Water cycle Concept	The foundational idea behind Water cycle	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
899227c1-5b7d-4aa9-a488-a9be18416f5e	Water cycle Application	How Water cycle is used in practical situations	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
1ed3b7de-32e0-43ea-9ec3-e47e1731cf21	Water cycle Development	The process of improving and expanding Water cycle	https://images.unsplash.com/photo-1606326608606-aa0b62935f2b?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
3b10cbb7-0fdb-4318-9d73-cd6122a6a32e	Living and non living things	The main subject we're learning about	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
868fe98f-5f5c-4e59-aa0c-bf53682e89ad	Parts of Living and non living things	The pieces that make up the whole	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
0b389863-5e2f-4501-929d-2cacfc697462	Learning about Living and non living things	How we discover and understand new information	https://images.unsplash.com/photo-1546410531-bb4caa6b424d?q=80&w=1471&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
9959dd23-ebcd-4858-9ba0-9ab0222b8dcd	Examples of Living and non living things	Things we can see or experience in real life	https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?q=80&w=1373&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
048842aa-8f9c-48b0-8d81-69ab9dc3d840	Living and non living things	The main concept we're learning about. living and non living things refers to an important subject that helps us understand our world better.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
53156d83-5d6f-4fa3-ada3-8f6b5aad5e28	Living and non living things Features	The important parts or characteristics of living and non living things that make it special and help us recognize it.	https://images.unsplash.com/photo-1599687351724-dfa3c4ff81b1?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
8f877c61-2d41-4cdc-811f-32c897f424aa	Living and non living things Examples	Real things we can see or experience that show us what living and non living things is like in our daily lives.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
569dae40-d62b-4f71-a29e-de95baeafe5d	Learning About Living and non living things	The process of discovering new information and understanding living and non living things through activities and exploration.	https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?q=80&w=1373&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
c6249e53-673f-4a1f-9cff-87cd38a5623b	Living and non living things in Our World	How we see and use living and non living things in everyday situations and why it's important to know about it.	https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
0178d969-9943-486f-ae54-0c404e94ac86	Observe	To watch carefully and notice details about something in science.	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
27a2c6e5-f421-4290-bb3f-b550bcdc7310	Experiment	A test we do to find out what happens and learn new information.	https://images.unsplash.com/photo-1497633762265-9d179a990aa6?q=80&w=1473&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
ff992365-68ec-4620-bed7-ce14e2952777	Living and non living things	The main concept we're learning about. A key concept that helps us understand Living, living, things.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
093ca836-89ef-44fd-9e1c-c8739277d0d9	Living and non living things Features	The important characteristics that make Living and non living things unique.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
7b825cfa-a32d-4925-9518-9d7be6b187dc	Living and non living things Examples	Real-world instances that show what Living and non living things looks like in practice.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
2d3d37dd-e691-42d9-91b7-afc7ed89d076	Living and non living things Importance	Why learning about Living and non living things matters in our lives and the world.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
bc8cc41c-2aef-499b-acb8-5dec0561ae8c	Living and non living things Applications	Ways we can use our knowledge of Living and non living things in different situations.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: story; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.story (id, slide_number, story_text, image_url, lesson_id) FROM stdin;
42d5355b-ac40-4198-881b-a978cd279084	1	This is story slide 1 about lviing and non lving things . Generated based on: Create a slide about...	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
98ab8057-ec59-4fca-b3b6-9e157ec246bb	2	This is story slide 2 about lviing and non lving things . Generated based on: Create a slide about...	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
f1209c3e-ca33-445b-b766-93e9b2d2ffaf	3	This is story slide 3 about lviing and non lving things . Generated based on: Create a slide about...	/placeholder.svg	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
96422fb4-0e4e-440f-b58f-30ec4f29fdc7	1	Once upon a time, in a world fascinated by About Motion and force, there lived a curious student named Alex. Alex had always wondered about the mysteries of About Motion and force and how it shaped the world around them.	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
bea3e95e-4396-42a9-805a-303ec0fddcc8	2	One day, Alex's teacher introduced a special lesson on About Motion and force. "Today," the teacher announced, "we will explore the fascinating world of About Motion and force and discover how it connects to Create a lesson about motion a..."	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
7c317fe7-7b6e-4376-9de0-ce0b7cb28a0e	3	As Alex learned more about About Motion and force, a new understanding began to form. The complex ideas started to make sense, and Alex could see how About Motion and force was present in everyday life. This knowledge would forever change how Alex viewed the world.	/placeholder.svg	aad8744c-fa09-4532-8a05-c6dbf68a936b
30cc2049-b0d7-4d36-9ffc-993c2f04f36b	1	Once upon a time, in a world fascinated by Water cycle, there lived a curious student named Alex. Alex had always wondered about the mysteries of Water cycle and how it shaped the world around them.	https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
a7bcf523-30ca-488a-b81e-b14bdbe7abae	2	One day, Alex's teacher introduced a special lesson on Water cycle. "Today," the teacher announced, "we will explore the fascinating world of Water cycle and discover how it connects to Water cycle..."	https://images.unsplash.com/photo-1546410531-bb4caa6b424d?q=80&w=1471&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
fc8ce1e1-687d-495e-b5e0-46978ce5d996	3	As Alex learned more about Water cycle, a new understanding began to form. The complex ideas started to make sense, and Alex could see how Water cycle was present in everyday life. This knowledge would forever change how Alex viewed the world.	https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?q=80&w=1470&auto=format&fit=crop	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
fdefef14-a5a4-4492-b087-a3abfa75c885	1	The Living and non living things Discovery\n\nAlex was excited to learn about Living and non living things at school. It seemed like such an interesting subject.	https://images.unsplash.com/photo-1427504494785-3a9ca7044f45?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
2b49851a-e3de-485c-af3a-3176d3150ccb	2	"What's so special about Living and non living things?" Alex asked the teacher. "Let's find out together," the teacher replied with a smile.	https://images.unsplash.com/photo-1516979187457-637abb4f9353?q=80&w=1470&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
de4a7809-5ca5-44a4-bebc-7080e3653bb6	3	Throughout the day, Alex discovered many interesting facts about Living and non living things. Each new thing was more fascinating than the last.	https://images.unsplash.com/photo-1629909613654-28e377c37b09?q=80&w=1468&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
796da1b7-3042-4254-92ed-c3fd6d45fd9c	4	Alex's friends also enjoyed learning about Living and non living things. They worked together on activities and shared what they learned.	https://images.unsplash.com/photo-1503676382389-4809596d5290?q=80&w=1374&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
f686d03d-dfb2-4544-8a60-cdf9d02d7dfb	5	At the end of the day, Alex thought, "Living and non living things is amazing! I want to learn even more about it tomorrow."	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	7bfcd6ee-2701-4470-902f-f38dc953f809
fa360e50-5827-4eb0-b008-a96439e59048	1	Maya's Living and non living things Adventure\n\nMaya was curious about living and non living things. Maya wondered how it worked and why it was important.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
47e3457a-9a0a-4915-825a-2617888ab305	2	"I want to learn about living and non living things," Maya told Teacher. "How can I discover more?"	https://images.unsplash.com/photo-1434030216411-0b793f4b4173?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
97b68db7-343b-4636-b6ac-7d54ca6be25b	3	Teacher smiled and said, "The best way to learn about living and non living things is to observe carefully and ask questions."	https://images.unsplash.com/photo-1503676382389-4809596d5290?q=80&w=1374&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
5a15128a-ad85-463d-919c-9d04306d8fc6	4	Maya spent the day looking for living and non living things all around. Maya noticed many interesting things about it.	https://images.unsplash.com/photo-1488190211105-8b0e65b80b4e?q=80&w=1470&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
a8debe57-962e-423c-af62-2429b6d470e5	5	At the end of the day, Maya shared what Maya learned with friends. "I discovered so many amazing things about living and non living things!" Maya said with a big smile.	https://images.unsplash.com/photo-1535982330050-f1c2fb79ff78?q=80&w=1374&auto=format&fit=crop	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
c4f4f7a2-c860-4e80-9aee-45b5d3e2847a	1	The Living and non living things Adventure with Jamie\n\nJamie was excited to learn about Living and non living things today. "I wonder what makes Living and non living things so special?" Jamie thought while walking to school.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
36bf8cd1-f75a-4f24-bd75-f12cf1103188	2	"We're starting a new project on Living and non living things," announced the teacher with a smile. The class buzzed with excitement. Jamie and Lily decided to work together.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
f24abc5b-ac92-4f71-a997-19378b7a501c	3	They gathered information about Living and non living things from books, pictures, and videos. "Look at all these interesting facts!" Jamie said, pointing to a colorful diagram about Living and non living things.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
62c3bbfb-2eec-4eb9-8871-e8b96522c004	4	Jamie and Lily created a presentation about what makes Living and non living things important in our world. They included pictures, facts, and even a short quiz for their classmates.	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
eabe6e9c-ec8f-43b7-9e91-120ece5c97f0	5	When they shared their work with the class, everyone learned something new about Living and non living things. "Living and non living things connects to so many things in our lives," Jamie explained. "The more we learn about it, the better we understand our world!"	https://source.unsplash.com/random/?education,learning	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: students_attempts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.students_attempts (attempt_id, student_id, lesson_id, score, "timestamp") FROM stdin;
\.


--
-- Data for Name: subjects; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subjects (subject_id, subject_name, description) FROM stdin;
e19c37f8-3337-4ade-a830-b47d623d99b8	Science	Explore the natural world
7f853f8b-15c7-4a07-b5cf-e1ae62df9cd2	Math	Develop numerical skills
83be0736-c0d7-4aae-bb03-9b03ef1bc897	Art	Express creativity through various mediums
3c455a08-71a3-4100-89cc-74663835123d	Language	Develop communication skills
\.


--
-- Data for Name: video; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.video (id, video_url, subtitle_text, autogenerated, lesson_id) FROM stdin;
2b55fe88-d4f7-4edf-83e9-13572c281daa	https://example.com/video.mp4	Video subtitles about lviing and non lving things 	t	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
9379ecc3-69a5-4fa1-9b4c-0d61a2c3513b	https://example.com/video.mp4	Welcome to our lesson on About Motion and force!\n\nIn this video, we'll explore the fascinating world of About Motion and force and how it relates to Create a lesson about motion and force for grade 3...\n\nWe'll cover the basic concepts, practical applications, and why About Motion and force is important in our daily lives.\n\nBy the end of this video, you'll have a solid understanding of About Motion and force and how to apply this knowledge in various situations.	t	aad8744c-fa09-4532-8a05-c6dbf68a936b
32e0015f-a98a-4e0b-b3fc-fa83daea8549	https://www.youtube.com/embed/jNQXAC9IVRw	Welcome to our lesson on Water cycle!\n\nIn this video, we'll explore the fascinating world of Water cycle and how it relates to Water cycle...\n\nWe'll cover the basic concepts, practical applications, and why Water cycle is important in our daily lives.\n\nBy the end of this video, you'll have a solid understanding of Water cycle and how to apply this knowledge in various situations.	t	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
70b251d8-0d5f-4c3f-a0bd-777d6204db13	https://www.youtube.com/embed/qbF4c-kRchE	Learning All About Living and non living things!\n\nWelcome to our video about Living and non living things! Today we'll discover what makes Living and non living things so interesting.\n\nWe'll explore key ideas and important facts about Living and non living things that will help us understand it better.\n\nLearning about Living and non living things helps us make connections to our everyday lives and the world around us.\n\nBy the end of this video, you'll have a better understanding of Living and non living things and why it matters!	t	7bfcd6ee-2701-4470-902f-f38dc953f809
19431f2d-391c-4a8e-8e05-f408072fd569	https://www.youtube.com/embed/aqz-KE-bpKQ	Welcome to Our Living and non living things Science Lesson!\n\nIn this video, we'll discover the exciting world of living and non living things through observation and exploration.\n\nScientists learn about living and non living things by asking questions and conducting experiments.\n\nLet's observe how living and non living things works in our world and why it's so important to understand.\n\nBy the end of this video, you'll know many interesting facts about living and non living things and how it relates to science!	t	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
15806a0d-a52b-4f72-910c-a6aca8bcc0ad	https://www.youtube.com/embed/aqz-KE-bpKQ	Discovering Living and non living things\n\nWelcome to our lesson about Living and non living things! In this video, we'll explore what makes this topic interesting and important.\n\nWe'll learn key concepts and ideas that help us understand Living and non living things better.\n\nLiving and non living things connects to many parts of our lives and helps us make sense of the world around us.\n\nBy the end of this lesson, you'll have new knowledge about Living and non living things that you can apply in different situations.	t	359c9a0f-f0ec-4209-ab74-ef9331545c0c
\.


--
-- Data for Name: vocabulary; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vocabulary (id, word, definition, image_url, audio_url, lesson_id) FROM stdin;
bf0c7f1d-85fc-4eb9-8722-364798074800	Example Word 1	Definition for example word 1 related to lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
a6fb70a4-b93a-4e75-ba41-d081b7b9b099	Example Word 2	Definition for example word 2 related to lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
326aa33a-7de7-47ff-83b2-b16f0750d276	Example Word 3	Definition for example word 3 related to lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
ffa8de5e-caf4-4942-8d52-c085d39273b9	Example Word 4	Definition for example word 4 related to lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
84772308-68d4-47ad-987e-e7536abb74ed	Example Word 5	Definition for example word 5 related to lviing and non lving things 	/placeholder.svg	\N	5af547a4-5f6b-4d4d-a79d-9a9b44d524c0
e151db06-fa52-4486-9fb5-75cf8398f5ee	About	The main concept of About Motion and force that relates to Create a lesson about motion a...	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
2edd8077-bfd7-485d-86bf-0205912a6468	About Motion and force Analysis	The systematic study of About Motion and force and its components.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
933e68be-0fd7-455e-9440-b9b23c5b3ea2	About Motion and force Structure	The fundamental organization of About Motion and force elements.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
f8035aaa-9383-47d6-bf36-2d42b2df665a	About Motion and force Theory	A comprehensive explanation of how About Motion and force works and its principles.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
74fba116-83ee-4161-ac20-64030bba2ab7	About Motion and force Application	The practical implementation of About Motion and force in real-world scenarios.	/placeholder.svg	\N	aad8744c-fa09-4532-8a05-c6dbf68a936b
b657427f-539f-4c72-a4f0-b8614dfeddfb	Water	The main concept of Water cycle that relates to Water cycle...	https://images.unsplash.com/photo-1606326608606-aa0b62935f2b?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
384e8353-c30e-441c-8e66-cd7307f54159	Water cycle Analysis	The systematic study of Water cycle and its components.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
12326443-c18d-4deb-ae1b-c0c2db2d601b	Water cycle Structure	The fundamental organization of Water cycle elements.	https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
4ef79b28-c82a-46b6-ac02-7625c80fe5a8	Water cycle Theory	A comprehensive explanation of how Water cycle works and its principles.	https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1422&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
e2399176-156a-44cf-8056-c8da6c5635f7	Water cycle Application	The practical implementation of Water cycle in real-world scenarios.	https://images.unsplash.com/photo-1546410531-bb4caa6b424d?q=80&w=1471&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	be1ccf35-69c6-4068-ae0e-4d523b0ccc45
a6030527-aafe-4ea1-ab81-4dc5b3bc6584	Living	The main concept we're learning about. Living and non living things refers to an important subject that helps us understand our world better.	https://images.unsplash.com/photo-1497633762265-9d179a990aa6?q=80&w=1473&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
27924ab1-81b9-41f3-a7ca-341a63c9e8c1	Living and non living things Features	The important parts or characteristics of Living and non living things that make it special and help us recognize it.	https://images.unsplash.com/photo-1543269865-cbf427effbad?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
90c10621-1d2b-42bc-b175-f04315ef318b	Living and non living things Examples	Real things we can see or experience that show us what Living and non living things is like in our daily lives.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
154fbf43-f663-4061-aff5-eef7b759381f	Learning About Living and non living things	The process of discovering new information and understanding Living and non living things through activities and exploration.	https://images.unsplash.com/photo-1629909613654-28e377c37b09?q=80&w=1468&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
e9af22c6-8739-4392-a0a8-f5834e52dfa3	Living and non living things in Our World	How we see and use Living and non living things in everyday situations and why it's important to know about it.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	7bfcd6ee-2701-4470-902f-f38dc953f809
27fdfba2-a091-41a2-8f6e-d37ab7ff6ab5	Living and non living things	The main concept we're learning about. living and non living things refers to an important subject that helps us understand our world better.	https://images.unsplash.com/photo-1509062522246-3755977927d7?q=80&w=1332&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
3806993c-4d39-4e97-af3a-d71b570e9250	Living and non living things Features	The important parts or characteristics of living and non living things that make it special and help us recognize it.	https://images.unsplash.com/photo-1629909613654-28e377c37b09?q=80&w=1468&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
697c63ae-e335-472f-9bec-723726b00368	Living and non living things Examples	Real things we can see or experience that show us what living and non living things is like in our daily lives.	https://images.unsplash.com/photo-1516979187457-637abb4f9353?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
05c39810-b9ef-4711-a37f-658c2f31e908	Learning About Living and non living things	The process of discovering new information and understanding living and non living things through activities and exploration.	https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-12s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
dfaeb093-56e1-46f1-a5a0-350b487cbafe	Living and non living things in Our World	How we see and use living and non living things in everyday situations and why it's important to know about it.	https://images.unsplash.com/photo-1509062522246-3755977927d7?q=80&w=1332&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
748efeed-6bb7-443c-8f51-381dc2acac8b	Observe	To watch carefully and notice details about something in science.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
d4f3cfea-1be0-4cb8-a376-1d1b36fe102b	Experiment	A test we do to find out what happens and learn new information.	https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?q=80&w=1470&auto=format&fit=crop	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	ad47f23e-c8c1-45eb-8cdd-a4fbdb40eeb3
253fd19c-9f85-486f-abe0-e795d5cfc89f	Living and non living things	The main concept we're learning about. A key concept that helps us understand Living, living, things.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
f20092bc-18c9-4814-8f74-579760121492	Living and non living things Features	The important characteristics that make Living and non living things unique.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-3s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
753f632c-1caa-4970-9062-7482e6672d56	Living and non living things Examples	Real-world instances that show what Living and non living things looks like in practice.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
44a58203-6cbd-4bdf-88e4-2177b8132e8f	Living and non living things Importance	Why learning about Living and non living things matters in our lives and the world.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-6s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
d1b5caf2-3b34-4515-9965-2431407f35fb	Living and non living things Applications	Ways we can use our knowledge of Living and non living things in different situations.	https://source.unsplash.com/random/?education,learning	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	359c9a0f-f0ec-4209-ab74-ef9331545c0c
15c8e6fd-b954-4fea-b107-48400f0b0c3d	Living and non living things	The main concept we're learning about. Living and non living things refers to an important subject that helps us understand our world better.	https://source.unsplash.com/random/800x600/?Living%20and%20non%20living%20things%20vocabulary&sig=1	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	e49e48ae-b086-43c9-b796-938ff16accb7
75b5dc77-cf5e-4b19-bbc0-1a04b0e51799	addition to 10 	A key concept in understanding our world. addition to 10  helps us learn about important natural phenomena.	https://source.unsplash.com/random/800x600/?addition%20to%2010%20%20vocabulary&sig=1	https://samplelib.com/lib/preview/mp3/sample-9s.mp3	9027d4be-dfd9-4d20-b59b-2034e8e84da7
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-03-11 04:47:37
20211116045059	2025-03-11 04:47:37
20211116050929	2025-03-11 04:47:37
20211116051442	2025-03-11 04:47:37
20211116212300	2025-03-11 04:47:37
20211116213355	2025-03-11 04:47:37
20211116213934	2025-03-11 04:47:37
20211116214523	2025-03-11 04:47:37
20211122062447	2025-03-11 04:47:37
20211124070109	2025-03-11 04:47:37
20211202204204	2025-03-11 04:47:37
20211202204605	2025-03-11 04:47:37
20211210212804	2025-03-11 04:47:37
20211228014915	2025-03-11 04:47:37
20220107221237	2025-03-11 04:47:37
20220228202821	2025-03-11 04:47:37
20220312004840	2025-03-11 04:47:37
20220603231003	2025-03-11 04:47:37
20220603232444	2025-03-11 04:47:37
20220615214548	2025-03-11 04:47:37
20220712093339	2025-03-11 04:47:37
20220908172859	2025-03-11 04:47:37
20220916233421	2025-03-11 04:47:37
20230119133233	2025-03-11 04:47:37
20230128025114	2025-03-11 04:47:37
20230128025212	2025-03-11 04:47:37
20230227211149	2025-03-11 04:47:37
20230228184745	2025-03-11 04:47:37
20230308225145	2025-03-11 04:47:37
20230328144023	2025-03-11 04:47:37
20231018144023	2025-03-11 04:47:37
20231204144023	2025-03-11 04:47:37
20231204144024	2025-03-11 04:47:37
20231204144025	2025-03-11 04:47:37
20240108234812	2025-03-11 04:47:37
20240109165339	2025-03-11 04:47:37
20240227174441	2025-03-11 04:47:37
20240311171622	2025-03-11 04:47:37
20240321100241	2025-03-11 04:47:37
20240401105812	2025-03-11 04:47:37
20240418121054	2025-03-11 04:47:37
20240523004032	2025-03-11 04:47:37
20240618124746	2025-03-11 04:47:37
20240801235015	2025-03-11 04:47:37
20240805133720	2025-03-11 04:47:37
20240827160934	2025-03-11 04:47:37
20240919163303	2025-03-11 04:47:37
20240919163305	2025-03-11 04:47:37
20241019105805	2025-03-11 04:47:37
20241030150047	2025-03-11 04:47:37
20241108114728	2025-03-11 04:47:37
20241121104152	2025-03-11 04:47:37
20241130184212	2025-03-11 04:47:37
20241220035512	2025-03-11 04:47:37
20241220123912	2025-03-11 04:47:37
20241224161212	2025-03-11 04:47:37
20250107150512	2025-03-11 04:47:38
20250110162412	2025-03-11 04:47:38
20250123174212	2025-03-11 04:47:38
20250128220012	2025-03-11 04:47:38
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-03-11 04:44:06.369985
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-03-11 04:44:06.411455
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-03-11 04:44:06.427591
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-03-11 04:44:06.486166
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-03-11 04:44:06.546406
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-03-11 04:44:06.560816
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-03-11 04:44:06.578527
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-03-11 04:44:06.609467
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-03-11 04:44:06.62676
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-03-11 04:44:06.640854
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-03-11 04:44:06.656643
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-03-11 04:44:06.673575
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-03-11 04:44:06.696256
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-03-11 04:44:06.718206
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-03-11 04:44:06.748088
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-03-11 04:44:06.796961
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-03-11 04:44:06.833316
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-03-11 04:44:06.850969
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-03-11 04:44:06.87013
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-03-11 04:44:06.885851
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-03-11 04:44:06.903032
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-03-11 04:44:06.922568
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-03-11 04:44:06.972587
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-03-11 04:44:07.008554
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-03-11 04:44:07.023404
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2025-03-11 04:44:07.037326
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 1, false);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: action_activity action_activity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_activity
    ADD CONSTRAINT action_activity_pkey PRIMARY KEY (id);


--
-- Name: chant chant_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chant
    ADD CONSTRAINT chant_pkey PRIMARY KEY (id);


--
-- Name: content_categories content_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_categories
    ADD CONSTRAINT content_categories_pkey PRIMARY KEY (category_id);


--
-- Name: content_full content_full_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_full
    ADD CONSTRAINT content_full_pkey PRIMARY KEY (content_id);


--
-- Name: conversation conversation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.conversation
    ADD CONSTRAINT conversation_pkey PRIMARY KEY (id);


--
-- Name: evaluation evaluation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.evaluation
    ADD CONSTRAINT evaluation_pkey PRIMARY KEY (evaluation_id);


--
-- Name: flashcards flashcards_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.flashcards
    ADD CONSTRAINT flashcards_pkey PRIMARY KEY (id);


--
-- Name: leaderboard leaderboard_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.leaderboard
    ADD CONSTRAINT leaderboard_pkey PRIMARY KEY (leaderboard_id);


--
-- Name: lessons lessons_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_pkey PRIMARY KEY (lesson_id);


--
-- Name: poems poems_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.poems
    ADD CONSTRAINT poems_pkey PRIMARY KEY (id);


--
-- Name: questions questions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_pkey PRIMARY KEY (id);


--
-- Name: song song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_pkey PRIMARY KEY (id);


--
-- Name: sort_match sort_match_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sort_match
    ADD CONSTRAINT sort_match_pkey PRIMARY KEY (id);


--
-- Name: story story_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.story
    ADD CONSTRAINT story_pkey PRIMARY KEY (id);


--
-- Name: students_attempts students_attempts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.students_attempts
    ADD CONSTRAINT students_attempts_pkey PRIMARY KEY (attempt_id);


--
-- Name: subjects subjects_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subjects
    ADD CONSTRAINT subjects_pkey PRIMARY KEY (subject_id);


--
-- Name: video video_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.video
    ADD CONSTRAINT video_pkey PRIMARY KEY (id);


--
-- Name: vocabulary vocabulary_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vocabulary
    ADD CONSTRAINT vocabulary_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: action_activity action_activity_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_activity
    ADD CONSTRAINT action_activity_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: chant chant_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chant
    ADD CONSTRAINT chant_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: content_full content_full_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_full
    ADD CONSTRAINT content_full_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: conversation conversation_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.conversation
    ADD CONSTRAINT conversation_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: evaluation evaluation_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.evaluation
    ADD CONSTRAINT evaluation_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: flashcards flashcards_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.flashcards
    ADD CONSTRAINT flashcards_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: lessons lessons_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lessons
    ADD CONSTRAINT lessons_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(subject_id);


--
-- Name: poems poems_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.poems
    ADD CONSTRAINT poems_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: questions questions_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: song song_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: sort_match sort_match_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sort_match
    ADD CONSTRAINT sort_match_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: story story_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.story
    ADD CONSTRAINT story_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: students_attempts students_attempts_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.students_attempts
    ADD CONSTRAINT students_attempts_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: video video_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.video
    ADD CONSTRAINT video_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: vocabulary vocabulary_lesson_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vocabulary
    ADD CONSTRAINT vocabulary_lesson_id_fkey FOREIGN KEY (lesson_id) REFERENCES public.lessons(lesson_id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE action_activity; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.action_activity TO anon;
GRANT ALL ON TABLE public.action_activity TO authenticated;
GRANT ALL ON TABLE public.action_activity TO service_role;


--
-- Name: TABLE chant; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chant TO anon;
GRANT ALL ON TABLE public.chant TO authenticated;
GRANT ALL ON TABLE public.chant TO service_role;


--
-- Name: TABLE content_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.content_categories TO anon;
GRANT ALL ON TABLE public.content_categories TO authenticated;
GRANT ALL ON TABLE public.content_categories TO service_role;


--
-- Name: TABLE content_full; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.content_full TO anon;
GRANT ALL ON TABLE public.content_full TO authenticated;
GRANT ALL ON TABLE public.content_full TO service_role;


--
-- Name: TABLE conversation; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.conversation TO anon;
GRANT ALL ON TABLE public.conversation TO authenticated;
GRANT ALL ON TABLE public.conversation TO service_role;


--
-- Name: TABLE evaluation; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.evaluation TO anon;
GRANT ALL ON TABLE public.evaluation TO authenticated;
GRANT ALL ON TABLE public.evaluation TO service_role;


--
-- Name: TABLE flashcards; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.flashcards TO anon;
GRANT ALL ON TABLE public.flashcards TO authenticated;
GRANT ALL ON TABLE public.flashcards TO service_role;


--
-- Name: TABLE leaderboard; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.leaderboard TO anon;
GRANT ALL ON TABLE public.leaderboard TO authenticated;
GRANT ALL ON TABLE public.leaderboard TO service_role;


--
-- Name: TABLE lessons; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.lessons TO anon;
GRANT ALL ON TABLE public.lessons TO authenticated;
GRANT ALL ON TABLE public.lessons TO service_role;


--
-- Name: TABLE poems; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.poems TO anon;
GRANT ALL ON TABLE public.poems TO authenticated;
GRANT ALL ON TABLE public.poems TO service_role;


--
-- Name: TABLE questions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.questions TO anon;
GRANT ALL ON TABLE public.questions TO authenticated;
GRANT ALL ON TABLE public.questions TO service_role;


--
-- Name: TABLE song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.song TO anon;
GRANT ALL ON TABLE public.song TO authenticated;
GRANT ALL ON TABLE public.song TO service_role;


--
-- Name: TABLE sort_match; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.sort_match TO anon;
GRANT ALL ON TABLE public.sort_match TO authenticated;
GRANT ALL ON TABLE public.sort_match TO service_role;


--
-- Name: TABLE story; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.story TO anon;
GRANT ALL ON TABLE public.story TO authenticated;
GRANT ALL ON TABLE public.story TO service_role;


--
-- Name: TABLE students_attempts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.students_attempts TO anon;
GRANT ALL ON TABLE public.students_attempts TO authenticated;
GRANT ALL ON TABLE public.students_attempts TO service_role;


--
-- Name: TABLE subjects; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.subjects TO anon;
GRANT ALL ON TABLE public.subjects TO authenticated;
GRANT ALL ON TABLE public.subjects TO service_role;


--
-- Name: TABLE video; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.video TO anon;
GRANT ALL ON TABLE public.video TO authenticated;
GRANT ALL ON TABLE public.video TO service_role;


--
-- Name: TABLE vocabulary; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.vocabulary TO anon;
GRANT ALL ON TABLE public.vocabulary TO authenticated;
GRANT ALL ON TABLE public.vocabulary TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

